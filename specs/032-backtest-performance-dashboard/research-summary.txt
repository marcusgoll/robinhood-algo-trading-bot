=================================
RESEARCH SUMMARY
=================================

## Reusable Backend Components

### 1. Backtest Data Models (CRITICAL REUSE)
- **Location**: src/trading_bot/backtest/models.py
- **Models Available**:
  * BacktestResult - Complete backtest output with metrics, trades, equity curve
  * PerformanceMetrics - Win rate, profit factor, max drawdown, Sharpe ratio  
  * Trade - Individual trade records with entry/exit, P&L
  * BacktestConfig - Configuration for backtest runs
- **Serialization**: Already has Decimal → float conversion methods
- **Decision**: Reuse 100% - these models perfectly match dashboard needs

### 2. Report Generator (HIGH REUSE)
- **Location**: src/trading_bot/backtest/report_generator.py
- **Methods**:
  * generate_json() - Exports BacktestResult to JSON (exactly what API needs!)
  * generate_markdown() - Creates formatted reports
- **Decision**: Reuse generate_json() as-is for API response serialization

### 3. FastAPI Infrastructure (FULL REUSE)
- **Location**: api/app/main.py
- **Patterns Identified**:
  * FastAPI 0.104.1 with Uvicorn
  * CORS middleware configured
  * /api/v1/ prefix convention
  * Health endpoints (/healthz, /readyz)
  * Rate limiting (100 req/min)
  * OpenAPI tags for documentation
- **Decision**: Follow existing patterns for new /api/v1/backtests endpoints

### 4. Existing API Routes Pattern
- **Location**: api/app/routes/*.py
- **Pattern**: Router-based organization
  * orders.py - Order management
  * state.py - Bot state queries
  * config.py - Configuration
  * metrics.py - Performance metrics
- **Decision**: Create api/app/routes/backtests.py following same pattern

## New Components Needed

### Backend (Python FastAPI)
1. **api/app/routes/backtests.py** - New router for backtest endpoints
   - GET /api/v1/backtests - List all backtests
   - GET /api/v1/backtests/:id - Get single backtest with full data

2. **api/app/schemas/backtest.py** - Pydantic response models
   - BacktestListResponse
   - BacktestDetailResponse  
   - Convert existing dataclasses to Pydantic for FastAPI

3. **api/app/services/backtest_loader.py** - Load backtest results from filesystem
   - Read JSON exports from report generator
   - Implement caching (10-minute TTL)

### Frontend (React + TypeScript)
1. **frontend/** - New directory (first frontend component!)
   - React 18.x + TypeScript 5.x
   - Vite for build tooling
   - Recharts for charting

2. **UI Components**:
   - BacktestList - Table with filter/sort
   - BacktestDetail - 5 charts + metrics table
   - CompareView - Overlay multiple backtests

## Architecture Context From Project Docs

### Tech Stack Alignment
- **Backend**: Python 3.11, FastAPI 0.104.1 ✅
- **Frontend**: NONE EXISTS - This introduces first UI component
- **API Pattern**: REST with /api/v1/ prefix ✅
- **Data**: File-based (JSONL logs), no database ✅
- **Deployment**: Docker Compose, Hetzner VPS ✅

### Integration Points
- **Backtest JSON Files**: Already generated by report_generator.py
- **API Server**: FastAPI already running in docker-compose
- **CORS**: Already configured for localhost:3000 ✅

### No Duplication Found
- ✅ No existing dashboard/visualization
- ✅ No existing React frontend
- ✅ No existing backtest API endpoints
- ✅ This is entirely new functionality


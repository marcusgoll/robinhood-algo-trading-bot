# Robinhood Authentication Module - Internal API Contract
# This is NOT a REST API - it's a Python service class contract
# Documented in OpenAPI-style format for clarity

openapi: 3.0.0
info:
  title: RobinhoodAuth Service API
  description: |
    Internal Python service for Robinhood authentication.
    Not a REST API - this documents the class interface.
  version: 1.0.0

# Note: This is a Python class, not REST endpoints
# Documenting methods as "paths" for contract clarity

paths:
  /login:
    post:
      summary: Authenticate with Robinhood
      description: |
        Login to Robinhood using credentials from config.
        Attempts pickle restoration first, then username/password if needed.
        Handles MFA challenges automatically if ROBINHOOD_MFA_SECRET set.
      operationId: login
      parameters: []
      responses:
        '200':
          description: Authentication successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  authenticated:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Authentication successful"
        '401':
          description: Authentication failed (invalid credentials)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationError'
        '500':
          description: Server error (network, API failure)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerError'

  /logout:
    post:
      summary: Logout from Robinhood
      description: |
        Logout from Robinhood and clean up session.
        Deletes .robinhood.pickle file.
      operationId: logout
      responses:
        '200':
          description: Logout successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Logout successful"
        '500':
          description: Logout error (handled gracefully)

  /session:
    get:
      summary: Get current session
      description: |
        Returns current authenticated session object (robin_stocks session).
        Returns None if not authenticated.
      operationId: get_session
      responses:
        '200':
          description: Session retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  session:
                    type: object
                    nullable: true
                    description: "robin_stocks session object (opaque)"
                  authenticated:
                    type: boolean
                    example: true

  /authenticated:
    get:
      summary: Check authentication status
      description: |
        Returns boolean indicating if currently authenticated.
      operationId: is_authenticated
      responses:
        '200':
          description: Status retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  authenticated:
                    type: boolean
                    example: true

  /refresh:
    post:
      summary: Refresh expired token
      description: |
        Manually trigger token refresh.
        Normally called automatically on 401 errors.
      operationId: refresh_token
      responses:
        '200':
          description: Token refreshed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  refreshed:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Token refreshed"
        '401':
          description: Refresh failed (re-authentication needed)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationError'

components:
  schemas:
    AuthenticationError:
      type: object
      properties:
        error:
          type: string
          example: "Invalid credentials"
        details:
          type: string
          example: "Username or password incorrect"
        retry_guidance:
          type: string
          example: "Check ROBINHOOD_USERNAME and ROBINHOOD_PASSWORD in .env"

    ServerError:
      type: object
      properties:
        error:
          type: string
          example: "Network error"
        details:
          type: string
          example: "Failed to connect to Robinhood API"
        retry_guidance:
          type: string
          example: "Check network connection and try again"

    AuthConfig:
      type: object
      description: Configuration for authentication
      required:
        - username
        - password
      properties:
        username:
          type: string
          format: email
          example: "user@example.com"
        password:
          type: string
          format: password
          example: "********"
        mfa_secret:
          type: string
          nullable: true
          example: "BASE32ENCODEDSECRET"
          description: "Optional: MFA secret for pyotp"
        device_token:
          type: string
          nullable: true
          example: "device-token-uuid"
          description: "Optional: Device token for faster auth"
        pickle_path:
          type: string
          default: ".robinhood.pickle"
          example: ".robinhood.pickle"

# Python Class Interface Documentation

# class RobinhoodAuth:
#     """
#     Authentication service for Robinhood API.
#
#     Example usage:
#         config = Config.from_env_and_json()
#         auth = RobinhoodAuth(config)
#
#         # Login
#         auth.login()  # Returns True if successful
#
#         # Check status
#         if auth.is_authenticated():
#             session = auth.get_session()
#             # Use session for API calls
#
#         # Logout
#         auth.logout()
#     """
#
#     def __init__(self, config: Config) -> None:
#         """Initialize with Config instance."""
#         pass
#
#     def login(self) -> bool:
#         """
#         Login to Robinhood.
#
#         Returns:
#             True if authentication successful
#
#         Raises:
#             AuthenticationError: If credentials invalid or MFA fails
#             ValueError: If config invalid
#         """
#         pass
#
#     def logout(self) -> None:
#         """
#         Logout from Robinhood and clean up session.
#
#         Deletes .robinhood.pickle file.
#         """
#         pass
#
#     def get_session(self) -> Optional[Any]:
#         """
#         Get current authenticated session.
#
#         Returns:
#             robin_stocks session object or None if not authenticated
#         """
#         pass
#
#     def is_authenticated(self) -> bool:
#         """
#         Check if currently authenticated.
#
#         Returns:
#             True if authenticated, False otherwise
#         """
#         pass
#
#     def refresh_token(self) -> bool:
#         """
#         Refresh expired access token.
#
#         Returns:
#             True if refresh successful
#
#         Raises:
#             AuthenticationError: If refresh fails
#         """
#         pass
